Registers:
  version: '1.0'
  warning: |
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    DO NOT EDIT THIS FILE

    This file was generated from template '{{ metadata.template }}'
    and register map {{ metadata.config }}, version {{ tree.version }}
    by the script '{{ metadata.name }}', version: {{ metadata.version }},
    using the following commandline:

    {{ metadata.cmdline }}

    Please do NOT edit this file, but edit the source file at '{{ metadata.template }}'

    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************

  type: R
  step: 0x010
  default: 0
  endpoints: 0
  entries:
    - ref: Bar0
      offset: 0x0000
    - ref: Bar1
      offset: 0x0000
    - ref: Bar2
      offset: 0x0000
    - ref: Monitorsections
      offset: 0x0000
    
#The Monitor sections are no registers, this is a grouping of the "Read" registers
#Any register with type "R" has to be in one of these groups, it will be grouped in 
#separate records in register_map_monitor, in order to drive the signals from 
#different HDL modules in the user application
Monitorsections:
  endpoints: 0,1
  entries:
    - name: GenericBoardInformation
      record_name: register_map_gen_board_info
      bitfield: 
        - range: 0..0
          type: R
    - name: HouseKeepingControlsAndMonitors
      record_name: register_map_hk_monitor
      bitfield: 
        - range: 0..0
          type: R

#Bar0 contains the registers dedicated to Wupper. Please only edit registers in Bar2
#Registers in this group will not be generated with WupperCodeGen
Bar0:
  endpoints: 0,1
  entries:
    - ref: DMA_DESC
    - ref: DMA_DESC_STATUS
      offset: 0x0200
    - name: BAR0_VALUE
      offset: 0x0300
      bitfield:
        - range: 31..0
          desc: Copy of BAR0 offset reg.
    - name: BAR1_VALUE
      bitfield:
        - range: 31..0
          desc: Copy of BAR1 offset reg.
    - name: BAR2_VALUE
      bitfield:
        - range: 31..0
          desc: Copy of BAR2 offset reg.
    - name: DMA_DESC_ENABLE
      offset: 0x0400
      bitfield:
        - range: 7..0
          type: W
          desc: Enable descriptors 7:0. One bit per descriptor. Cleared when Descriptor is handled.
    - name: DMA_FIFO_FLUSH
      type: T
      bitfield:
        - range: any
          desc: Flush (reset). Any write clears the DMA Main output FIFO
    - name: DMA_RESET
      type: T
      bitfield:
        - range: any
          desc: Reset Wupper Core (DMA Controller FSMs)
    - name: SOFT_RESET
      type: T
      bitfield:
        - range: any
          desc: Global Software Reset. Any write resets applications, e.g. the Central Router.
    - name: REGISTER_RESET
      type: T
      bitfield:
        - range: any
          desc: Resets the register map to default values. Any write triggers this reset.
    - name: FROMHOST_FULL_THRESH
      type: W
      bitfield:
        - range: 22..16
          name: THRESHOLD_ASSERT
          desc: Assert value of the FromHost programmable full flag
        - range: 6..0
          name: THRESHOLD_NEGATE
          desc: Negate value of the FromHost programmalbe full flag
    - name: TOHOST_FULL_THRESH
      type: W
      bitfield:
        - range: 27..16
          name: THRESHOLD_ASSERT
          desc: Assert value of the ToHost programmable full flag
        - range: 11..0
          name: THRESHOLD_NEGATE
          desc: Negate value of the ToHost programmalbe full flag


DMA_DESC:
  number: 8
  type: W
  entries:
    - name: DMA_DESC_{index}
      bitfield:
        - range: 127..64
          name: END_ADDRESS
          desc: End Address
        - range: 63..0
          name: START_ADDRESS
          desc: Start Address
    - name: DMA_DESC_{index}a
      bitfield:
        - range: 127..64
          name: RD_POINTER
          desc: PC Read Pointer
        - range: 12
          name: WRAP_AROUND
          desc: Wrap around
        - range: 11
          name: READ_WRITE
          desc: "1: fromHost/ 0: toHost"
        - range: 10..0
          name: NUM_WORDS
          desc: Number of 32 bit words

DMA_DESC_STATUS:
  number: 8
  entries:
    - name: DMA_DESC_STATUS_{index}
      bitfield:
        - range: 66
          name: EVEN_PC
          desc: Even address cycle PC
        - range: 65
          name: EVEN_DMA
          desc: Even address cycle DMA
        - range: 64
          name: DESC_DONE
          desc: Descriptor Done
        - range: 63..0
          name: CURRENT_ADDRESS
          desc: Current Address


#Bar1 contains the registers dedicated to the Wupper interrupg controller.
#Please only edit registers in Bar2.
#Registers in this group will not be generated with WupperCodeGen
Bar1:
  endpoints: 0,1
  type: W
  entries:
    - ref: INT_VEC
    - name: INT_TAB_ENABLE
      offset: 0x100
      bitfield:
        - range: 7..0
          desc: |
            Interrupt Table enable
            Selectively enable Interrupts

INT_VEC:
  number: 8
  type: W
  entries:
    - name: INT_VEC_{index}
      bitfield:
        - range: 127..96
          name: INT_CTRL
          desc: Interrupt Control
        - range: 95..64
          name: INT_DATA
          desc: Interrupt Data
        - range: 64..0
          name: INT_ADDRESS
          desc: Interrupt Address

#Bar 2 contains application specific registers, used in the example application.
#Registers in this group (and it's referenced subroups) will be generated with
#WupperCodeGen for wupper Firmware, Software and Documentation
Bar2:
  entries:
    - ref: GenericBoardInformation
      offset: 0x0000
    - ref: ApplicationSpecific
      offset: 0x1000
    - ref: HouseKeepingControlsAndMonitors
      offset: 0x2000

GenericBoardInformation:
  group: GEN
  desc: Generic Board Information
  endpoints: 0
  entries:
    - name: REG_MAP_VERSION
      bitfield:
        - range: 15..0
          value: REG_MAP_VERSION
          desc: Register Map Version, {{ tree.version }} formatted as {{ tree.version|version|xhex }}

    - name: BOARD_ID_TIMESTAMP
      bitfield:
        - range: 39..0
          value: BUILD_DATETIME
          desc: Board ID Date / Time in BCD format YYMMDDhhmm

    - name: BOARD_ID_SVN
      bitfield:
        - range: 15..0
          value: std_logic_vector(to_unsigned(SVN_VERSION,16))
          desc: Board ID SVN Revision

    - name: STATUS_LEDS
      type: W
      bitfield:
        - range: 7..0
          default: 0xAB
          desc: Board GPIO Leds

    - name: GENERIC_CONSTANTS
      bitfield:
        - range: 15..8
          name: INTERRUPTS
          value: std_logic_vector(to_unsigned(NUMBER_OF_INTERRUPTS,8))
          desc: Number of Interrupts
        - range: 7..0
          name: DESCRIPTORS
          value: std_logic_vector(to_unsigned(NUMBER_OF_DESCRIPTORS,8))
          desc: Number of Descriptors

    - name: CARD_TYPE
      bitfield:
        - range: 63..0
          value: std_logic_vector(to_unsigned(CARD_TYPE,64))
          desc: |
            Card Type:
              * 709 (0x2c5) VC709
              * 710 (0x2c6) HTG710
              * 711 (0x2c7) BNL711
    
    
ApplicationSpecific:
  group: APP
  desc: Application specific registers
  endpoints: 0,1
  entries:
    - name: LFSR_SEED_0
      desc: Least significant 64 bits of the LFSR seed
      type: W
      default: 0x0
      bitfield:
        - range: 63..0
    - name: LFSR_SEED_1
      desc: Bits 127 downto 64 of the LFSR seed
      type: W
      default: 0x0
      bitfield:
        - range: 63..0
    - name: LFSR_SEED_2
      desc: Bits 191 downto 128 of the LFSR seed
      type: W
      default: 0x0
      bitfield:
        - range: 63..0
    - name: LFSR_SEED_3
      desc: Bits 255 downto 192 of the LFSR seed
      type: W
      default: 0x0
      bitfield:
        - range: 63..0
    - name: APP_MUX
      type: W
      desc: |
            Switch between multiplier or LFSR.
              * 0 LFSR
              * 1 Loopback
      bitfield:
        - range: 0..0
    - name: LFSR_LOAD_SEED
      type: T
      desc: Writing any value to this register triggers the LFSR module to reset to the LFSR_SEED value
      value: 1
      bitfield:
        - range: any
    - name: APP_ENABLE
      type: W
      desc: |
            1 Enables LFSR module or Loopback (depending on APP_MUX)
            0 disable application
      bitfield:
        - range: 0..0
    
HouseKeepingControlsAndMonitors:
  group: HKC
  desc: House Keeping Controls and Monitors
  endpoints: 0
  entries:
    - name: MMCM_MAIN_PLL_LOCK
      type: R
      offset: 0x0300
      desc: Main MMCM PLL Lock Status
      bitfield:
        - range: 0
    - name: I2C_WR
      type: W
      bitfield:
        - range: any
          name: I2C_WREN
          type: T
          value: not register_map_monitor_s.register_map_hk_monitor.I2C_WR.I2C_FULL
          desc: Any write to this register triggers an I2C read or write sequence
        - range: 25
          type: R
          name: I2C_FULL
          desc: I2C FIFO full
        - range: 24
          name: WRITE_2BYTES
          type: W
          desc: Write two bytes
        - range: 23..16
          name: DATA_BYTE2
          type: W
          desc: Data byte 2
        - range: 15..8
          name: DATA_BYTE1
          type: W
          desc: Data byte 1
        - range: 7..1
          name: SLAVE_ADDRESS
          type: W
          desc: Slave address
        - range: 0
          name: READ_NOT_WRITE
          type: W
          desc: READ/<o>WRITE</o>
    - name: I2C_RD
      type: T
      bitfield:
        - range: any
          name: I2C_RDEN
          type: T
          value: not register_map_monitor_s.register_map_hk_monitor.I2C_RD.I2C_EMPTY
          desc: Any write to this register pops the last I2C data from the FIFO
        - range: 8
          type: R
          name: I2C_EMPTY
          desc: I2C FIFO Empty
        - range: 7..0
          type: R
          name: I2C_DOUT
          desc: I2C READ Data
    - name: FPGA_CORE_TEMP
      type: R
      bitfield:
        - range: 11..0
          desc:  |
                 XADC temperature monitor for the FPGA CORE
                 for Virtex7
                 temp (C)= ((FPGA_CORE_TEMP* 503.975)/4096)-273.15
                 for Kintex Ultrascale
                 temp (C)= ((FPGA_CORE_TEMP* 502.9098)/4096)-273.8195
    - name: FPGA_CORE_VCCINT
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCINT = (FPGA_CORE_VCCINT *3.0)/4096
    - name: FPGA_CORE_VCCAUX
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCAUX = (FPGA_CORE_VCCAUX *3.0)/4096
    - name: FPGA_CORE_VCCBRAM
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCBRAM = (FPGA_CORE_VCCBRAM *3.0)/4096
    - endpoints: 0,1
      name: FPGA_DNA
      type: R
      bitfield:
        - range: 63..0
          desc: Unique identifier of the FPGA
    - name: INT_TEST_4
      offset: 0x0800
      type: T
      value: 1
      bitfield:
        - range: any
          desc: Fire a test MSIx interrupt \#4
    - name: INT_TEST_5
      type: T
      value: 1
      bitfield:
        - range: any
          desc: Fire a test MSIx interrupt \#5

