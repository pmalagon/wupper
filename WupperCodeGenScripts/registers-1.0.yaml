Registers:
  version: '2.0'
  warning: |
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    DO NOT EDIT THIS FILE

    This file was generated from template '{{ metadata.template }}'
    and register map {{ metadata.config }}, version {{ tree.version }}
    by the script '{{ metadata.name }}', version: {{ metadata.version }},
    using the following commandline:

    {{ metadata.cmdline }}

    Please do NOT edit this file, but edit the source file at '{{ metadata.template }}'

    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************
    ***************************************************************************

  type: R
  step: 0x010
  default: 0
  endpoints: 0
  entries:
    - ref: Bar0
      offset: 0x0000
    - ref: Bar1
      offset: 0x0000
    - ref: Bar2
      offset: 0x0000
    - ref: Monitorsections
      offset: 0x0000
    
#The Monitor sections are no registers, this is a grouping of the "Read" registers
#Any register with type "R" has to be in one of these groups, it will be grouped in 
#separate records in register_map_monitor, in order to drive the signals from 
#different HDL modules in the user application
Monitorsections:
  endpoints: 0,1
  entries:
    - name: GenericBoardInformation
      record_name: register_map_gen_board_info
      bitfield: 
        - range: 0..0
          type: R
    - name: HouseKeepingControlsAndMonitors
      record_name: register_map_hk_monitor
      bitfield: 
        - range: 0..0
          type: R
    - name: Wishbone
      record_name: wishbone_monitor
      bitfield:
        - range: 0..0
          type: R

#Bar0 contains the registers dedicated to Wupper. Please only edit registers in Bar2
#Registers in this group will not be generated with WupperCodeGen
Bar0:
  endpoints: 0,1
  entries:
    - ref: DMA_DESC
    - ref: DMA_DESC_STATUS
      offset: 0x0200
    - name: BAR0_VALUE
      offset: 0x0300
      bitfield:
        - range: 31..0
          desc: Copy of BAR0 offset reg.
    - name: BAR1_VALUE
      bitfield:
        - range: 31..0
          desc: Copy of BAR1 offset reg.
    - name: BAR2_VALUE
      bitfield:
        - range: 31..0
          desc: Copy of BAR2 offset reg.
    - name: DMA_DESC_ENABLE
      offset: 0x0400
      bitfield:
        - range: 7..0
          type: W
          desc: Enable descriptors 7:0. One bit per descriptor. Cleared when Descriptor is handled.
    - name: DMA_FIFO_FLUSH
      type: T
      bitfield:
        - range: any
          desc: Flush (reset). Any write clears the DMA Main output FIFO
    - name: DMA_RESET
      type: T
      bitfield:
        - range: any
          desc: Reset Wupper Core (DMA Controller FSMs)
    - name: SOFT_RESET
      type: T
      bitfield:
        - range: any
          desc: Global Software Reset. Any write resets applications, e.g. the Central Router.
    - name: REGISTER_RESET
      type: T
      bitfield:
        - range: any
          desc: Resets the register map to default values. Any write triggers this reset.
    - name: FROMHOST_FULL_THRESH
      type: W
      bitfield:
        - range: 22..16
          name: THRESHOLD_ASSERT
          desc: Assert value of the FromHost programmable full flag
        - range: 6..0
          name: THRESHOLD_NEGATE
          desc: Negate value of the FromHost programmalbe full flag
    - name: TOHOST_FULL_THRESH
      type: W
      bitfield:
        - range: 27..16
          name: THRESHOLD_ASSERT
          desc: Assert value of the ToHost programmable full flag
        - range: 11..0
          name: THRESHOLD_NEGATE
          desc: Negate value of the ToHost programmalbe full flag

    - name: BUSY_THRESHOLD_ASSERT
      type: W
      desc: Tohost or Fromhost busy will be asserted in circular DMA mode when the server PC buffer gets full (space below ASSERT threshold)..
      default: 0x6400000
      bitfield:
        - range: 63..0
        
    - name: BUSY_THRESHOLD_NEGATE
      type: W
      desc: Tohost or Fromhost busy will be negated in circular DMA mode when the server PC buffer gets less full (space above NEGATE threshold).
      default: 0x6E00000
      bitfield:
        - range: 63..0

    - name: BUSY_STATUS
      type: R
      bitfield:
        - range: 1
          name: FROMHOST_BUSY
          desc: A fromhost descriptor passed BUSY_THRESHOLD_ASSERT, busy flag set
        - range: 0
          name: TOHOST_BUSY
          desc: A tohost descriptor passed BUSY_THRESHOLD_ASSERT, busy flag set

    - name: PC_PTR_GAP
      type: W
      desc: This is the minimum value that the pc_pointer in a descriptor has to decrease in order to flip the evencycle_pc bit
      default: 0x1000000
      bitfield:
        - range: 63..0

DMA_DESC:
  number: 8
  type: W
  entries:
    - name: DMA_DESC_{index}
      bitfield:
        - range: 127..64
          name: END_ADDRESS
          desc: End Address
        - range: 63..0
          name: START_ADDRESS
          desc: Start Address
    - name: DMA_DESC_{index}a
      bitfield:
        - range: 127..64
          name: SW_POINTER
          desc: Pointer controlled by the software, indicating read or write status for circular DMA
        - range: 12
          name: WRAP_AROUND
          desc: Wrap around
        - range: 11
          name: FROMHOST
          desc: "1: fromHost/ 0: toHost"
        - range: 10..0
          name: NUM_WORDS
          desc: Number of 32 bit words

DMA_DESC_STATUS:
  number: 8
  entries:
    - name: DMA_DESC_STATUS_{index}
      bitfield:
        - range: 66
          name: EVEN_PC
          desc: Even address cycle PC
        - range: 65
          name: EVEN_DMA
          desc: Even address cycle DMA
        - range: 64
          name: DESC_DONE
          desc: Descriptor Done
        - range: 63..0
          name: FW_POINTER
          desc: Pointer controlled by the firmwarre, indicating where the DMA is busy reading or writing


#Bar1 contains the registers dedicated to the Wupper interrupg controller.
#Please only edit registers in Bar2.
#Registers in this group will not be generated with WupperCodeGen
Bar1:
  endpoints: 0,1
  type: W
  entries:
    - ref: INT_VEC
    - name: INT_TAB_ENABLE
      offset: 0x100
      bitfield:
        - range: 7..0
          desc: |
            Interrupt Table enable
            Selectively enable Interrupts

INT_VEC:
  number: 16
  type: W
  entries:
    - name: INT_VEC_{index}
      bitfield:
        - range: 127..96
          name: INT_CTRL
          desc: Interrupt Control
        - range: 95..64
          name: INT_DATA
          desc: Interrupt Data
        - range: 63..0
          name: INT_ADDRESS
          desc: Interrupt Address

#Bar 2 contains application specific registers, used in the example application.
#Registers in this group (and it's referenced subroups) will be generated with
#WupperCodeGen for wupper Firmware, Software and Documentation
Bar2:
  entries:
    - ref: GenericBoardInformation
      offset: 0x0000
    - ref: HouseKeepingControlsAndMonitors
      offset: 0x1000
    - ref: Wishbone
      offset: 0x2000

GenericBoardInformation:
  group: GEN
  desc: Generic Board Information
  endpoints: 0
  entries:
    - name: REG_MAP_VERSION
      bitfield:
        - range: 15..0
          value: std_logic_vector(to_unsigned({{ tree.version|version }},16))
          desc: Register Map Version, {{ tree.version }} formatted as {{ tree.version|version|xhex }}

    - name: BOARD_ID_TIMESTAMP
      bitfield:
        - range: 39..0
          value: BUILD_DATETIME
          desc: Board ID Date / Time in BCD format YYMMDDhhmm

    - name: GIT_COMMIT_TIME
      bitfield:
        - range: 39..0
          value: COMMIT_DATETIME
          desc: Board ID GIT Commit time of current revision, Date / Time in BCD format YYMMDDhhmm
          
    - name: GIT_TAG
      bitfield:
        - range: 63..0
          value: GIT_TAG(63 downto 0)
          desc: String containing the current GIT TAG

    - name: GIT_COMMIT_NUMBER
      bitfield:
        - range: 31..0
          value: std_logic_vector(to_unsigned(GIT_COMMIT_NUMBER,32))
          desc: Number of GIT commits after current GIT_TAG
          
    - name: GIT_HASH
      bitfield:
        - range: 31..0
          value: GIT_HASH(159 downto 128)
          desc: Short GIT hash (32 bit)

    - name: STATUS_LEDS
      type: W
      bitfield:
        - range: 7..0
          default: 0xAB
          desc: Board GPIO Leds

    - name: GENERIC_CONSTANTS
      bitfield:
        - range: 15..8
          name: INTERRUPTS
          value: std_logic_vector(to_unsigned(NUMBER_OF_INTERRUPTS,8))
          desc: Number of Interrupts
        - range: 7..0
          name: DESCRIPTORS
          value: std_logic_vector(to_unsigned(NUMBER_OF_DESCRIPTORS,8))
          desc: Number of Descriptors


    - name: CARD_TYPE
      bitfield:
        - range: 63..0
          value: std_logic_vector(to_unsigned(CARD_TYPE,64))
          desc: |
            Card Type:
              - 105 (0x069): KCU-105
              - 128 (0x080): VCU128
              - 180 (0x0B4): VMK180
              - 709 (0x2c5): VC-709
              - 710 (0x2c6): HTG-710
              - 711 (0x2c7): BNL-711
              - 712 (0x2c8): BNL-712

    - name: PCIE_ENDPOINT
      type: R
      desc: Indicator of the PCIe endpoint on BNL71x cards with two endpoints. 0 or 1
      bitfield:
        - range: 0
          value: std_logic_vector(to_unsigned(PCIE_ENDPOINT, 1))
        
    - name: NUMBER_OF_PCIE_ENDPOINTS
      type: R
      desc: Number of PCIe endpoints on the card. The VCU128 cards have 2 endpoints
      bitfield:
        - range: 1..0

  
HouseKeepingControlsAndMonitors:
  group: HKC
  desc: House Keeping Controls and Monitors
  endpoints: 0
  entries:
    - name: MMCM_MAIN_PLL_LOCK
      type: R
      offset: 0x0300
      desc: Main MMCM PLL Lock Status
      bitfield:
        - range: 0
    - name: I2C_WR
      type: W
      bitfield:
        - range: any
          name: I2C_WREN
          type: T
          value: not register_map_monitor_s.register_map_hk_monitor.I2C_WR.I2C_FULL
          desc: Any write to this register triggers an I2C read or write sequence
        - range: 25
          type: R
          name: I2C_FULL
          desc: I2C FIFO full
        - range: 24
          name: WRITE_2BYTES
          type: W
          desc: Write two bytes
        - range: 23..16
          name: DATA_BYTE2
          type: W
          desc: Data byte 2
        - range: 15..8
          name: DATA_BYTE1
          type: W
          desc: Data byte 1
        - range: 7..1
          name: SLAVE_ADDRESS
          type: W
          desc: Slave address
        - range: 0
          name: READ_NOT_WRITE
          type: W
          desc: READ/<o>WRITE</o>
    - name: I2C_RD
      type: T
      bitfield:
        - range: any
          name: I2C_RDEN
          type: T
          value: not register_map_monitor_s.register_map_hk_monitor.I2C_RD.I2C_EMPTY
          desc: Any write to this register pops the last I2C data from the FIFO
        - range: 8
          type: R
          name: I2C_EMPTY
          desc: I2C FIFO Empty
        - range: 7..0
          type: R
          name: I2C_DOUT
          desc: I2C READ Data
    - name: FPGA_CORE_TEMP
      type: R
      bitfield:
        - range: 11..0
          desc:  |
                 XADC temperature monitor for the FPGA CORE
                 for Virtex7
                 temp (C)= ((FPGA_CORE_TEMP* 503.975)/4096)-273.15
                 for Kintex Ultrascale
                 temp (C)= ((FPGA_CORE_TEMP* 502.9098)/4096)-273.8195
    - name: FPGA_CORE_VCCINT
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCINT = (FPGA_CORE_VCCINT *3.0)/4096
    - name: FPGA_CORE_VCCAUX
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCAUX = (FPGA_CORE_VCCAUX *3.0)/4096
    - name: FPGA_CORE_VCCBRAM
      type: R
      bitfield:
        - range: 11..0
          desc:  XADC voltage measurement VCCBRAM = (FPGA_CORE_VCCBRAM *3.0)/4096
    - endpoints: 0,1
      name: FPGA_DNA
      type: R
      bitfield:
        - range: 63..0
          desc: Unique identifier of the FPGA
    - name: INT_TEST
      offset: 0x0800
      type: W
      value: 1
      bitfield:
        - name: TRIGGER
          type: T
          range: any
          desc: Fire a test MSIx interrupt set in IRQ
        - name: IRQ
          type: W
          range: 3..0
          desc: Set this field to a value equal to the MSIX interrupt to be fired. The write triggers the interrupt immediately.
    - name: DMA_BUSY_STATUS
      type: W
      bitfield:
        - range: any
          type: T
          value: 1
          name: CLEAR_LATCH
          desc: Any write to this register clears TOHOST_BUSY_LATCHED
        - range: 4
          type: W
          name: ENABLE
          desc: Enable the DMA buffer on the server as a source of busy
          default: 0
        - range: 3
          type: R
          name: TOHOST_BUSY_LATCHED
          desc: A tohost descriptor has passed BUSY_THRESHOLD_ASSERT in the past, busy flag was set
          value: (others => tohost_busy_latched_40_s) 
        - range: 2
          type: R
          name: FROMHOST_BUSY_LATCHED
          desc: A fromhost descriptor has passed BUSY_THRESHOLD_ASSERT in the past, busy flag was set
          value: (others => fromhost_busy_latched_40_s) 
        - range: 1
          type: R
          name: FROMHOST_BUSY
          desc: A fromhost descriptor passed BUSY_THRESHOLD_ASSERT, busy flag set
          value: (others => fromhost_busy_40_s)
        - range: 0
          type: R
          name: TOHOST_BUSY
          desc: A tohost descriptor passed BUSY_THRESHOLD_ASSERT, busy flag set
          value: (others => tohost_busy_40_s)
          
Wishbone:
  desc: Wishbone
  endpoints: 0
  entries:
    - name: WISHBONE_CONTROL
      type: W
      bitfield:
        - range: 32
          name: WRITE_NOT_READ
          desc: wishbone write command wishbone read command
        - range: 31..0
          name: ADDRESS
          desc: Slave address for Wishbone bus
    - name: WISHBONE_WRITE
      type: T
      bitfield:
        - range: any
          type: T
          value: 1
          name: WRITE_ENABLE
          desc: Any write to this register triggers a write to the Wupper to Wishbone fifo
        - range: 32 
          name: FULL
          type: R
        - range: 31..0      
          name: DATA
          type: W
    - name: WISHBONE_READ
      type: T
      bitfield:
        - range: any
          type: T
          value: 1
          name: READ_ENABLE
          desc: Any write to this register triggers a read from the Wishbone to Wupper fifo
        - range: 32
          name: EMPTY
          type: R
          desc: Indicates that the Wishbone to Wupper fifo is empty
        - range: 31..0  
          name: DATA
          type: R
          desc: Wishbone read data
    - name: WISHBONE_STATUS
      type: R
      bitfield:
        - range: 4
          name:  INT
          desc: interrupt
        - range: 3
          name: RETRY 
          desc: Interface is not ready to accept data cycle should be retried
        - range: 2
          name: STALL  
          desc: When pipelined mode slave can't accept additional transactions in its queue
        - range: 1
          name: ACKNOWLEDGE
          desc: Indicates the termination of a normal bus cycle
        - range: 0
          name: ERROR
          desc: Address not mapped by the crossbar
  
