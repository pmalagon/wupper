{{ tree.warning|vhdl_comment }}

--!------------------------------------------------------------------------------
--!
--!           NIKHEF - National Institute for Subatomic Physics
--!
--!                       Electronics Department
--!
--!-----------------------------------------------------------------------------
--! @class pcie_package
--!
--!
--! @author      Andrea Borga    (andrea.borga@nikhef.nl)<br>
--!              Frans Schreuder (frans.schreuder@nikhef.nl)
--!
--!
--! @date        07/01/2015    created
--!
--! @version     1.0
--!
--! @brief
--! This package contains the data types for the PCIe DMA core, as well as some
--! constants, addresses and register types for the application.
--!
--!
--! @detail
--!
--!-----------------------------------------------------------------------------
--! @TODO
--!
--!
--! ------------------------------------------------------------------------------
--! Wupper: PCIe Gen3 and Gen4 DMA Core for Xilinx FPGAs
--! 
--! Copyright (C) 2021 Nikhef, Amsterdam (f.schreuder@nikhef.nl)
--! 
--! Licensed under the Apache License, Version 2.0 (the "License");
--! you may not use this file except in compliance with the License.
--! You may obtain a copy of the License at
--! 
--!         http://www.apache.org/licenses/LICENSE-2.0
--! 
--! Unless required by applicable law or agreed to in writing, software
--! distributed under the License is distributed on an "AS IS" BASIS,
--! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--! See the License for the specific language governing permissions and
--! limitations under the License.
-- 
--! @brief ieee



library ieee;
use ieee.numeric_std.all;
--use ieee.std_logic_unsigned.all;
use ieee.std_logic_1164.all;

use work.data_width_package.all;

package pcie_package is

  function to_sl( A: std_logic_vector) return std_logic ;
  function or_reduce(slv : in std_logic_vector) return std_logic ;
  --
  -- PCIe DMA core: AXI-4 Stream interface
  type axis_type is record
    tdata   : std_logic_vector(PCIE_DATA_WIDTH-1 downto 0);
    tkeep   : std_logic_vector(15 downto 0);
    tuser   : std_logic_vector(182 downto 0);
    tlast   : std_logic;
    tvalid  : std_logic;
    state   : std_logic_vector(2 downto 0); --debugging purposes, connected to ILA
  end record;

  type axis_r_type is record
    tready: std_logic;
  end record;

  --
  -- PCIe DMA core: descriptors
  type dma_descriptor_type is record
    start_address   : std_logic_vector(63 downto 0);
    end_address     : std_logic_vector(63 downto 0);
    dword_count     : std_logic_vector(10 downto 0);
    read_not_write  : std_logic;     --1 means this is a read descriptor, 0: write descriptor
    enable          : std_logic;     --descriptor is valid
    wrap_around     : std_logic;     --1 means when end is reached, keep enabled and start over
    evencycle_pc    : std_logic;     --For every time the pc pointer overflows, this bit toggles.
    pc_pointer      : std_logic_vector(63 downto 0); --Last address that the PC has read / written. For write: overflow and read until this cycle.
    pc_pointer_updated : std_logic;  --Pulse when the pc_pointer is written
  end record;

  type dma_descriptors_type is array (natural range <>) of dma_descriptor_type;

  type dma_status_type is record
    current_address : std_logic_vector(63 downto 0);
    evencycle_dma   : std_logic;     --For every time the current_address overflows, this bit toggles
    address_wrapped : std_logic;
  end record;

  type dma_statuses_type is array(natural range <>) of dma_status_type;

  --
  -- PCIe DMA core: Interrupt Vectors
  type interrupt_vector_type is record
    int_vec_add  : std_logic_vector(63 downto 0);
    int_vec_data : std_logic_vector(31 downto 0);
    int_vec_ctrl : std_logic_vector(31 downto 0);
  end record;

  type interrupt_vectors_type is array (natural range <>) of interrupt_vector_type;
  
  type slv_array is array (natural range <>) of std_logic_vector(PCIE_DATA_WIDTH-1 downto 0);
  type slv12_array is array (natural range <>) of std_logic_vector(11 downto 0);

  --! Address Offset assignment
  --! --> BAR0 User Application Registers Addresses
  -- ### BAR0 registers: start
  constant REG_DESCRIPTOR_0        : std_logic_vector(19 downto 0) := x"00000";
  constant REG_DESCRIPTOR_0a       : std_logic_vector(19 downto 0) := x"00010";
  constant REG_DESCRIPTOR_1        : std_logic_vector(19 downto 0) := x"00020";
  constant REG_DESCRIPTOR_1a       : std_logic_vector(19 downto 0) := x"00030";
  constant REG_DESCRIPTOR_2        : std_logic_vector(19 downto 0) := x"00040";
  constant REG_DESCRIPTOR_2a       : std_logic_vector(19 downto 0) := x"00050";
  constant REG_DESCRIPTOR_3        : std_logic_vector(19 downto 0) := x"00060";
  constant REG_DESCRIPTOR_3a       : std_logic_vector(19 downto 0) := x"00070";
  constant REG_DESCRIPTOR_4        : std_logic_vector(19 downto 0) := x"00080";
  constant REG_DESCRIPTOR_4a       : std_logic_vector(19 downto 0) := x"00090";
  constant REG_DESCRIPTOR_5        : std_logic_vector(19 downto 0) := x"000A0";
  constant REG_DESCRIPTOR_5a       : std_logic_vector(19 downto 0) := x"000B0";
  constant REG_DESCRIPTOR_6        : std_logic_vector(19 downto 0) := x"000C0";
  constant REG_DESCRIPTOR_6a       : std_logic_vector(19 downto 0) := x"000D0";
  constant REG_DESCRIPTOR_7        : std_logic_vector(19 downto 0) := x"000E0";
  constant REG_DESCRIPTOR_7a       : std_logic_vector(19 downto 0) := x"000F0";
  constant REG_DESCRIPTOR_8        : std_logic_vector(19 downto 0) := x"00100";
  constant REG_DESCRIPTOR_8a       : std_logic_vector(19 downto 0) := x"00110";
  constant REG_DESCRIPTOR_9        : std_logic_vector(19 downto 0) := x"00120";
  constant REG_DESCRIPTOR_9a       : std_logic_vector(19 downto 0) := x"00130";
  constant REG_DESCRIPTOR_10       : std_logic_vector(19 downto 0) := x"00140";
  constant REG_DESCRIPTOR_10a      : std_logic_vector(19 downto 0) := x"00150";
  constant REG_DESCRIPTOR_11       : std_logic_vector(19 downto 0) := x"00160";
  constant REG_DESCRIPTOR_11a      : std_logic_vector(19 downto 0) := x"00170";
  constant REG_DESCRIPTOR_12       : std_logic_vector(19 downto 0) := x"00180";
  constant REG_DESCRIPTOR_12a      : std_logic_vector(19 downto 0) := x"00190";
  constant REG_DESCRIPTOR_13       : std_logic_vector(19 downto 0) := x"001A0";
  constant REG_DESCRIPTOR_13a      : std_logic_vector(19 downto 0) := x"001B0";
  constant REG_DESCRIPTOR_14       : std_logic_vector(19 downto 0) := x"001C0";
  constant REG_DESCRIPTOR_14a      : std_logic_vector(19 downto 0) := x"001D0";
  constant REG_DESCRIPTOR_15       : std_logic_vector(19 downto 0) := x"001E0";
  constant REG_DESCRIPTOR_15a      : std_logic_vector(19 downto 0) := x"001F0";
  constant REG_STATUS_0            : std_logic_vector(19 downto 0) := x"00200";
  constant REG_STATUS_1            : std_logic_vector(19 downto 0) := x"00210";
  constant REG_STATUS_2            : std_logic_vector(19 downto 0) := x"00220";
  constant REG_STATUS_3            : std_logic_vector(19 downto 0) := x"00230";
  constant REG_STATUS_4            : std_logic_vector(19 downto 0) := x"00240";
  constant REG_STATUS_5            : std_logic_vector(19 downto 0) := x"00250";
  constant REG_STATUS_6            : std_logic_vector(19 downto 0) := x"00260";
  constant REG_STATUS_7            : std_logic_vector(19 downto 0) := x"00270";
  constant REG_STATUS_8            : std_logic_vector(19 downto 0) := x"00280";
  constant REG_STATUS_9            : std_logic_vector(19 downto 0) := x"00290";
  constant REG_STATUS_10           : std_logic_vector(19 downto 0) := x"002A0";
  constant REG_STATUS_11           : std_logic_vector(19 downto 0) := x"002B0";
  constant REG_STATUS_12           : std_logic_vector(19 downto 0) := x"002C0";
  constant REG_STATUS_13           : std_logic_vector(19 downto 0) := x"002D0";
  constant REG_STATUS_14           : std_logic_vector(19 downto 0) := x"002E0";
  constant REG_STATUS_15           : std_logic_vector(19 downto 0) := x"002F0";
  constant REG_BAR0                : std_logic_vector(19 downto 0) := x"00300";
  constant REG_BAR1                : std_logic_vector(19 downto 0) := x"00310";
  constant REG_BAR2                : std_logic_vector(19 downto 0) := x"00320";
  constant REG_DESCRIPTOR_ENABLE   : std_logic_vector(19 downto 0) := x"00400";
  constant REG_FIFO_FLUSH          : std_logic_vector(19 downto 0) := x"00410";
  constant REG_DMA_RESET           : std_logic_vector(19 downto 0) := x"00420";
  constant REG_SOFT_RESET          : std_logic_vector(19 downto 0) := x"00430";
  constant REG_REGISTER_RESET      : std_logic_vector(19 downto 0) := x"00440";
  constant REG_FROMHOST_FULL_THRESH: std_logic_vector(19 downto 0) := x"00450";
  constant REG_TOHOST_FULL_THRESH  : std_logic_vector(19 downto 0) := x"00460";
  constant REG_BUSY_THRESH_ASSERT  : std_logic_vector(19 downto 0) := x"00470";
  constant REG_BUSY_THRESH_NEGATE  : std_logic_vector(19 downto 0) := x"00480";
  constant REG_BUSY_STATUS         : std_logic_vector(19 downto 0) := x"00490";
  constant REG_PC_PTR_GAP          : std_logic_vector(19 downto 0) := x"004A0";
  
  -- BAR0 registers: end

  --! Address Offset assignment
  --! --> BAR1 User Application Registers Addresses
  -- ### BAR1 registers: start
     -- interrupt vectors
  constant REG_INT_VEC_00          : std_logic_vector(19 downto 0) := x"00000";
  constant REG_INT_VEC_01          : std_logic_vector(19 downto 0) := x"00010";
  constant REG_INT_VEC_02          : std_logic_vector(19 downto 0) := x"00020";
  constant REG_INT_VEC_03          : std_logic_vector(19 downto 0) := x"00030";
  constant REG_INT_VEC_04          : std_logic_vector(19 downto 0) := x"00040";
  constant REG_INT_VEC_05          : std_logic_vector(19 downto 0) := x"00050";
  constant REG_INT_VEC_06          : std_logic_vector(19 downto 0) := x"00060";
  constant REG_INT_VEC_07          : std_logic_vector(19 downto 0) := x"00070";
  constant REG_INT_VEC_08          : std_logic_vector(19 downto 0) := x"00080";
  constant REG_INT_VEC_09          : std_logic_vector(19 downto 0) := x"00090";
  constant REG_INT_VEC_10          : std_logic_vector(19 downto 0) := x"000A0";
  constant REG_INT_VEC_11          : std_logic_vector(19 downto 0) := x"000B0";
  constant REG_INT_VEC_12          : std_logic_vector(19 downto 0) := x"000C0";
  constant REG_INT_VEC_13          : std_logic_vector(19 downto 0) := x"000D0";
  constant REG_INT_VEC_14          : std_logic_vector(19 downto 0) := x"000E0";
  constant REG_INT_VEC_15          : std_logic_vector(19 downto 0) := x"000F0";
  constant REG_INT_TAB_EN          : std_logic_vector(19 downto 0) := x"00100";
  -- BAR1 registers: end


  --! Address Offset assignment
  --! --> BAR2 User Application Registers Addresses
  --! -- leave 16x8 = 128 bits space per register
  ------------------------------------
  ---- ## GENERATED code BEGIN #1 ----
  ------------------------------------
{% for item in nodes['Bar2']|list_nodes_recursively %}
{% if item.is_group %}

  --** {{ item.full_name|e }}
{% endif %}
{% if item.is_register %}
  constant {{ "%-34s"|format(item.prefix_name|prepend('REG_')) }} : std_logic_vector(19 downto 0) := {{ item.address|vhdl_constant(20)}};
{% endif %}
{% endfor %}
  -----------------------------------
  ---- GENERATED code END #1 ##  ----
  -----------------------------------

  --!
  --! --> CONTROL: Read/Write User Application Registers (Written by PCIe)
  ------------------------------------
  ---- ## GENERATED code BEGIN #2 ----
  ------------------------------------
{% for register in registers if register is in_group('Bar2')
                            and (register.is_write or register.is_trigger) %}
{% if loop.first %}
  -- Bitfields of Control Record
{% endif %}
{% if register.bitfield|count > 1 %}
{% if register.parent.is_sequence %}
{% if register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0) %}
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_type' if register.has_trigger_bitfields else '_w_type' if register.has_write_bitfields else '_r_type')}} is record
{% for bf in register.bitfield if bf.is_write or bf.is_trigger %}
    {{"%-30s"|format(bf.name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
  end record;
  --Array of registers
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields else '_r_array_type')}} is array (0 to {{register.parent.number-1}}) of {{register.type_name|lower|prepend('bitfield_')|append('_t_type' if register.has_trigger_bitfields else '_w_type' if register.has_write_bitfields else '_r_type')}};
{% if(register.parent.parent.is_sequence) %}
  --Two dimensional array of registers
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_2d_array_type' if register.has_trigger_bitfields else '_w_2d_array_type' if register.has_write_bitfields else '_r_2d_array_type')}} is array (0 to {{register.parent.parent.number-1}}) of {{register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields else '_r_array_type')}};
{% endif %}{# if(register.parent.parent.is_sequence) #}
{% endif %}{# register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0) #}
{% else %}
  type {{register.prefix_name|lower|prepend('bitfield_')|append('_t_type' if register.has_trigger_bitfields else '_w_type' if register.has_write_bitfields else '_r_type')}} is record
{% for bf in register.bitfield if bf.is_write or bf.is_trigger %}
    {{"%-30s"|format(bf.name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
  end record;

{% endif %}{# if register.parent.is_sequence #}
{% else %}{# if register.bitfield|count > 1 #}
{% if register.parent.parent.is_sequence %}
{% if register.bitfield|count > 0 and register.parent.is_sequence and register.index == 0 and register.parent.index == 0 %}
{% for bf in register.bitfield if bf.is_write or bf.is_trigger %}
  --Array of registers (2D sequence) (std_logic_vector)
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields else '_r_array_type')}} is  array (0 to {{register.parent.number-1}}) of  {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
  --Two dimensional array of registers
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_2d_array_type' if register.has_trigger_bitfields else '_w_2d_array_type' if register.has_write_bitfields else '_r_2d_array_type')}} is array (0 to {{register.parent.parent.number-1}}) of {{register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields else '_r_array_type')}};
{% endfor %}
{% endif %}
{% else %}{# if register.parent.parent.is_sequence #}
{% if register.bitfield|count > 0 and register.parent.is_sequence and register.index == 0%}
{% for bf in register.bitfield if bf.is_write or bf.is_trigger %}
  --Array of registers (std_logic_vector)
  type {{register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields else '_r_array_type')}} is  array (0 to {{register.parent.number-1}}) of  {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}

  -- Control Record
  type register_map_control_type is record
{% for register in registers if register is in_group('Bar2') %}
{% if (register.bitfield|count > 1 and (register.is_write or register.is_trigger)) or register.parent.is_sequence %}
{% if register.parent.is_sequence %}
{% if (register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0) ) and (register.has_trigger_bitfields or register.has_write_bitfields)%}
{% if (register.parent.parent.is_sequence) %}
    {{"%-30s"|format(register.type_name)}} : {{"%-30s"|format(register.type_name|lower|prepend('bitfield_')|append('_t_2d_array_type' if register.has_trigger_bitfields else '_w_2d_array_type' if register.has_write_bitfields)|semi)}}  {{register.desc|vhdl_comment(70)}} 
{% elif register.type_name  %}
    {{"%-30s"|format(register.type_name)}} : {{"%-30s"|format(register.type_name|lower|prepend('bitfield_')|append('_t_array_type' if register.has_trigger_bitfields else '_w_array_type' if register.has_write_bitfields)|semi)}} {{register.desc|vhdl_comment(70)}}
{% endif %}
{% endif %}
{% else %}
    {{"%-30s"|format(register.prefix_name)}} : {{"%-30s"|format(register.prefix_name|lower|prepend('bitfield_')|append('_t_type' if register.has_trigger_bitfields else '_w_type')|semi)}}  {{register.desc|vhdl_comment(70)}} 
{% endif %}
{% else %}
{% for bf in register.bitfield if bf.is_write or bf.is_trigger %}
    {{"%-30s"|format(bf.full_name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
{% endif %}
{% endfor %}
  end record;
  -----------------------------------
  ---- GENERATED code END #2 ##  ----
  -----------------------------------

  constant REG_BUSY_THRESH_ASSERT_C : std_logic_vector(63 downto 0) := x"0000_0000_0C80_0000"; --200 MB busy threshold default value.
  constant REG_BUSY_THRESH_NEGATE_C : std_logic_vector(63 downto 0) := x"0000_0000_0DC0_0000"; --220 MB busy threshold default value.

  --!
  --! --> Read/Write User Application Registers DEFAULT values (Written by PCIe)
  ------------------------------------
  ---- ## GENERATED code BEGIN #3 ----
  ------------------------------------
{% for register in registers if register is in_group('Bar2') %}
{% for bf in register.bitfield %}
{% if bf.is_write or bf.is_trigger %}
  constant {{"%-40s"|format(bf.full_name|prepend('REG_')|append('_C'))}}: {{"%-32s"|format(bf|vhdl_logic_vector)}} := {{ "%-22s"|format(bf|vhdl_string_or_constant|semi) }} {{bf.desc|vhdl_comment(112)}}
{% endif %}
{% endfor %}
{% endfor %}
  -----------------------------------
  ---- GENERATED code END #3 ##  ----
  -----------------------------------

  --!
  --! --> MONITOR: Read Only User Application Registers (Read by PCIe)
  ------------------------------------
  ---- ## GENERATED code BEGIN #4 ----
  ------------------------------------

{% for monitorsection in registers if monitorsection is in_group('Monitorsections') %}
--
-- {{monitorsection.name}}
--
{% for register in registers if register is in_group(monitorsection.name)
                                         and register.has_read_bitfields %}
{% if register.bitfield|count > 1 %}
{% if loop.first %}
  -- Bitfields of {{monitorsection.name}}
{% endif %}
{% if not register.parent.is_sequence %}
  type {{register.prefix_name|lower|prepend('bitfield_')|append('_r_type')}} is record
{% for bf in register.bitfield if not bf.is_write and not bf.is_trigger %}
    {{"%-30s"|format(bf.name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
  end record;
{% elif register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0) %}
  type {{register.type_name|lower|prepend('bitfield_')|append('_r_type')}} is record
{% for bf in register.bitfield if not bf.is_write and not bf.is_trigger %}
    {{"%-30s"|format(bf.name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
  end record;
  --Array of registers
  type {{register.type_name|lower|prepend('bitfield_')|append('_r_array_type')}} is array (0 to {{register.parent.number-1}}) of {{register.type_name|lower|prepend('bitfield_')|append('_r_type')}};
{% if(register.parent.parent.is_sequence) %}
  --Two dimensional array of registers
  type {{register.type_name|lower|prepend('bitfield_')|append('_r_2d_array_type')}} is array (0 to {{register.parent.parent.number-1}}) of {{register.type_name|lower|prepend('bitfield_')|append('_r_array_type')}};
{% endif %}
{% endif %}
{% else %}
{% if register.bitfield|count > 0 and register.parent.is_sequence and register.index == 0%}
{% for bf in register.bitfield if bf.is_read %}
  --Array of registers (std_logic_vector)
  type {{register.type_name|lower|prepend('bitfield_')|append('_r_array_type')}} is  array (0 to {{register.parent.number-1}}) of  {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}

  -- {{monitorsection.name}}
  type {{monitorsection.record_name}}_type is record
{% for register in registers if register is in_group(monitorsection.name) and register is in_group('Bar2') and register.has_read_bitfields %}
{% if register.bitfield|count > 1 or register.parent.is_sequence %}
{% if register.parent.is_sequence %}
{% if register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0)%}
{% if (register.parent.parent.is_sequence) %}
    {{"%-30s"|format(register.type_name)}} : {{"%-30s"|format(register.type_name|lower|prepend('bitfield_')|append('_r_2d_array_type')|semi)}}
{% elif register.type_name  %}
    {{"%-30s"|format(register.type_name)}} : {{"%-30s"|format(register.type_name|lower|prepend('bitfield_')|append('_r_array_type')|semi)}}
{% endif %}
{% endif %}
{% else %}
    {{"%-30s"|format(register.prefix_name)}} : {{"%-30s"|format(register.prefix_name|lower|prepend('bitfield_')|append('_r_type')|semi)}}
{% endif %}
{% else %}
{% for bf in register.bitfield %}
    {{"%-30s"|format(bf.full_name)}} : {{"%-32s"|format(bf|vhdl_logic_vector|semi)}} {{bf.desc|vhdl_comment(70)}}
{% endfor %}
{% endif %}
{% endfor %}
end record;
{% endfor %}
  

  -- Monitor interface toward the dma_control block
  type register_map_monitor_type is record
{% for monitorsection in registers if monitorsection is in_group('Monitorsections') %}
    {{monitorsection.record_name}}  : {{monitorsection.record_name}}_type;
{% endfor %}
  end record;
  
  -- Constants for unused monitor records
{% for monitorsection in registers if monitorsection is in_group('Monitorsections') %}

  constant {{monitorsection.record_name}}_c : {{monitorsection.record_name}}_type := ({% set dummy=1 %}
{%   set ns = namespace(addComma = '\n    ') %}
{%   for register in registers if register is in_group(monitorsection.name) and register is in_group('Bar2') and register.has_read_bitfields %}
{%     if register.bitfield|count > 1 or register.parent.is_sequence %}
{%       if register.parent.is_sequence %}
{%         if register.index == 0 and ((not register.parent.parent.is_sequence) or register.parent.index == 0)%}
{%           if (register.parent.parent.is_sequence) %}
{%             if (register.bitfield|count > 1) %}
{{ns.addComma}}{{"%-30s"|format(register.type_name)}} => (others => (others => (others => (others => '0')))){% set dummy=1 %}
{%             else %}
{{ns.addComma}}{{"%-30s"|format(register.type_name)}} => (others => (others => (others => '0'))){% set dummy=1 %}
{%             endif %}
{%             set ns.addComma = ',\n    ' %}
{%           elif register.type_name  %}
{%             if (register.bitfield|count > 1) %}
{{ns.addComma}}{{"%-30s"|format(register.type_name)}} => (others => (others => (others => '0'))){% set dummy=1 %}
{%             else %}
{{ns.addComma}}{{"%-30s"|format(register.type_name)}} => (others => (others => '0')){% set dummy=1 %}
{%             endif %}
{%             set ns.addComma = ',\n    ' %}
{%           endif %}
{%         endif %}
{%       else %}
{{ns.addComma}}{{"%-30s"|format(register.prefix_name)}} => (others => (others => '0')){% set dummy=1 %}
{%         set ns.addComma = ',\n    ' %}
{%       endif %}
{%     else %}
{%       for bf in register.bitfield %}
{{ns.addComma}}{{"%-30s"|format(bf.full_name)}} => (others => '0'){% set dummy=1 %}
{%       endfor %}
{%         set ns.addComma = ',\n    ' %}
{%     endif %}
{%   endfor %}

  );
{% endfor %}
  -----------------------------------
  ---- GENERATED code END #4 ##  ----
  -----------------------------------

end package pcie_package ;

package body pcie_package is
    function to_sl( A: std_logic_vector) return std_logic is
    begin
        return A(A'low);
    end function to_sl;
    
    function or_reduce(slv : in std_logic_vector) return std_logic is
      variable res_v : std_logic := '0';  -- Null slv vector will also return '0'
    begin
      for i in slv'range loop
        res_v := res_v or slv(i);
      end loop;
      return res_v;
    end function;
    
end pcie_package;

