{{ tree.warning|c_comment }}

#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#include "regmap/regmap-symbol.h"


static
void regmap_str_upper(char *str)
{
  do
    {
      *str = toupper((unsigned char) *str);
    } while (*str++);
}

/* ================================ */
/* BELOW is ONLY generated CODE !   */
/* ================================ */
regmap_register_t regmap_bar0_registers[] =
  {
{% for item in nodes['Bar0']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
    { REG_{{ item.prefix_name }},
      "Full Register",
      {{ item.address|c_hex(5) }},
      REGMAP_REG_READ{% if item.has_write_bitfields or item.has_trigger_bitfields %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if item.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}

    },
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0
    }
  };


regmap_register_t regmap_bar1_registers[] =
  {
{% for item in nodes['Bar1']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
    { REG_{{ item.prefix_name }},
      "Full Register",
      {{ item.address|c_hex(5) }},
      REGMAP_REG_READ{% if item.has_write_bitfields or item.has_trigger_bitfields %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if item.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}

    },
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0
    }
  };


regmap_register_t regmap_bar2_registers[] =
  {
{% for item in nodes['Bar2']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
    { REG_{{ item.prefix_name }},
      "Full Register",
      {{ item.address|c_hex(5) }},
      REGMAP_REG_READ{% if item.has_write_bitfields or item.has_trigger_bitfields %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if item.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}

    },
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0
    }
  };


regmap_bitfield_t regmap_bar0_bitfields[] =
  {
{% for item in nodes['Bar0']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
{% for bf in item.bitfield %}
    { BF_{{ bf.full_name }},
{% if bf.lo < 64 %}
      "{{ bf.desc|c_string }}",
      {{ item.address|c_hex(5) }},
      {{ bf|c_mask|c_hex(16) }},
      {{ bf.lo }},
      {{ bf.hi }},
      REGMAP_REG_READ{% if bf.is_write or bf.is_trigger %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if bf.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}
{% else %}
      "{{ bf.desc|c_string }}",
      {{ (item.address+8)|c_hex(5) }},
      {{ bf|c_mask|shr64|c_hex(16) }},
      {{ bf.lo-64 }},
      {{ bf.hi-64 }},
      REGMAP_REG_READ{% if bf.is_write or bf.is_trigger %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if bf.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}
{% endif %}
      
    },
{% endfor %}
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0,
      0,
      0,
      0
    }
  };
  
regmap_bitfield_t regmap_bar1_bitfields[] =
  {
{% for item in nodes['Bar1']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
{% for bf in item.bitfield %}
    { BF_{{ bf.full_name }},
{% if bf.lo < 64 %}
      "{{ bf.desc|c_string }}",
      {{ item.address|c_hex(5) }},
      {{ bf|c_mask|c_hex(16) }},
      {{ bf.lo }},
      {{ bf.hi }},
      REGMAP_REG_READ{% if bf.is_write or bf.is_trigger %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if bf.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}
{% else %}
      "{{ bf.desc|c_string }}",
      {{ (item.address+8)|c_hex(5) }},
      {{ bf|c_mask|shr64|c_hex(16) }},
      {{ bf.lo-64 }},
      {{ bf.hi-64 }},
      REGMAP_REG_READ{% if bf.is_write or bf.is_trigger %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if bf.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}
{% endif %}
      
    },
{% endfor %}
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0,
      0,
      0,
      0
    }
  };
  
regmap_bitfield_t regmap_bar2_bitfields[] =
  {
{% for item in nodes['Bar2']|list_nodes_recursively %}
{% if item.is_group %}
    /* {{ item.full_name|e }} */
{% endif %}
{% if item.is_register %}
{% for bf in item.bitfield %}
    { BF_{{ bf.full_name }},
      "{{ bf.desc|c_string }}",
      {{ item.address|c_hex(5) }},
      {{ bf|c_mask|c_hex(16) }},
      {{ bf.lo }},
      {{ bf.hi }},
      REGMAP_REG_READ{% if bf.is_write or bf.is_trigger %}|REGMAP_REG_WRITE{% endif %},
      REGMAP_ENDPOINT_0{% if bf.has_endpoint(1) == '0,1' %}|REGMAP_ENDPOINT_1{% endif %}
      
    },
{% endfor %}
{% endif %}
{% endfor %}
    { NULL,
      NULL,
      0,
      0,
      0,
      0,
      0,
      0
    }
  };

regmap_group_t regmap_bar2_groups[] =
  {
{% set _index = [0] %}
{% set _col = [0] %}
{% for item in nodes['Bar2']|list_nodes_recursively %}
{% set index = _index.pop() %}
{% set col = _col.pop() %}
{% if item.has_groupname %}
{% if index > 0 %}
{% set col = 0 %}
 -1 }
    },
{% endif %}
    /* {{ item.full_name|e }} */
    { GRP_{{ item.group }},
      "{{ item.desc }}",
      {
{%- endif %}
{%- if item.is_register %}
 {{ index }},
{%- set index = index + 1 %}
{%- set col = col + 1 %}
{% if col % 10 == 0 %}
{% set col = 0 %}

{% endif %}
{%- endif %}
{% if _index.append(index) %}{% endif %}
{% if _col.append(col) %}{% endif %}
{%- endfor %}
 -1 }
    },
    { NULL,
      NULL,
      { -1 }
    }
  };
